{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","components/Header.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","users","catch","err","useEffect","memoizedHeader","useMemo","filteredRobots","filter","robot","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb2f3f67.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\r\n      <div>\r\n        <h2>{ name }</h2>\r\n        <p>{ email }</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Card;\r\n","import React, { Fragment } from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <Fragment>\r\n      {\r\n        robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}/>\r\n        );\r\n      })\r\n    }\r\n  </Fragment>\r\n  )\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '80vh'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        hasError: false\r\n      }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError){\r\n      return <h1>Oooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return <h1 className='f1'>RoboFriends</h1>\r\n};\r\n\r\nexport default Header;","import React, { useEffect, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => ({\r\n  searchField: state.searchRobots.searchField,\r\n  robots: state.requestRobots.robots,\r\n  isPending: state.requestRobots.isPending,\r\n  error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nconst App = ({ searchField, onSearchChange, onRequestRobots, robots, isPending }) => {\r\n  \r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, [onRequestRobots])\r\n\r\n  const memoizedHeader = useMemo(() => <Header />, [])\r\n  \r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  })\r\n  if (isPending){\r\n    return <h1>Loading...</h1>\r\n  } else {\r\n    return (\r\n      <div className='tc'>\r\n        {memoizedHeader}\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n          </ErrorBoundry>  \r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_PENDING \r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\r\n    .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}))\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS \r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}